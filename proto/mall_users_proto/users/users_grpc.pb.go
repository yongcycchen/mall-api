// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	// Get User Info
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// Get User Info By Phone
	GetUserInfoByPhone(ctx context.Context, in *GetUserInfoByPhoneRequest, opts ...grpc.CallOption) (*GetUserInfoByPhoneResponse, error)
	// CheckUserByPhone
	CheckUserByPhone(ctx context.Context, in *CheckUserByPhoneRequest, opts ...grpc.CallOption) (*CheckUserByPhoneResponse, error)
	// GetUserInfoByInviteCode
	GetUserInfoByInviteCode(ctx context.Context, in *GetUserByInviteCodeRequest, opts ...grpc.CallOption) (*GetUserByInviteCodeResponse, error)
	// Register
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// LoginUser
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	// CheckUserIdentity
	CheckUserIdentity(ctx context.Context, in *CheckUserIdentityRequest, opts ...grpc.CallOption) (*CheckUserIdentityResponse, error)
	// PasswordReset
	PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error)
	// UpdateUserLoginState
	UpdateUserLoginState(ctx context.Context, in *UpdateUserLoginStateRequest, opts ...grpc.CallOption) (*UpdateUserLoginStateResponse, error)
	// ModifyUserDeliveryInfo
	ModifyUserDeliveryInfo(ctx context.Context, in *ModifyUserDeliveryInfoRequest, opts ...grpc.CallOption) (*ModifyUserDeliveryInfoResponse, error)
	// GetUserDeliveryInfo
	GetUserDeliveryInfo(ctx context.Context, in *GetUserDeliveryInfoRequest, opts ...grpc.CallOption) (*GetUserDeliveryInfoResponse, error)
	// FindUserInfo
	FindUserInfo(ctx context.Context, in *FindUserInfoRequest, opts ...grpc.CallOption) (*FindUserInfoResponse, error)
	// UserAccountCharge
	UserAccountCharge(ctx context.Context, in *UserAccountChargeRequest, opts ...grpc.CallOption) (*UserAccountChargeResponse, error)
	// CheckUserDeliveryInfo
	CheckUserDeliveryInfo(ctx context.Context, in *CheckUserDeliveryInfoRequest, opts ...grpc.CallOption) (*CheckUserDeliveryInfoResponse, error)
	// CheckUserState
	CheckUserState(ctx context.Context, in *CheckUserStateRequest, opts ...grpc.CallOption) (*CheckUserStateResponse, error)
	// GetUserAccountId
	GetUserAccountId(ctx context.Context, in *GetUserAccountIdRequest, opts ...grpc.CallOption) (*GetUserAccountIdResponse, error)
	// ListUserInfo
	ListUserInfo(ctx context.Context, in *ListUserInfoRequest, opts ...grpc.CallOption) (*ListUserInfoResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserInfoByPhone(ctx context.Context, in *GetUserInfoByPhoneRequest, opts ...grpc.CallOption) (*GetUserInfoByPhoneResponse, error) {
	out := new(GetUserInfoByPhoneResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserInfoByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckUserByPhone(ctx context.Context, in *CheckUserByPhoneRequest, opts ...grpc.CallOption) (*CheckUserByPhoneResponse, error) {
	out := new(CheckUserByPhoneResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/CheckUserByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserInfoByInviteCode(ctx context.Context, in *GetUserByInviteCodeRequest, opts ...grpc.CallOption) (*GetUserByInviteCodeResponse, error) {
	out := new(GetUserByInviteCodeResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserInfoByInviteCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckUserIdentity(ctx context.Context, in *CheckUserIdentityRequest, opts ...grpc.CallOption) (*CheckUserIdentityResponse, error) {
	out := new(CheckUserIdentityResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/CheckUserIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error) {
	out := new(PasswordResetResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/PasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUserLoginState(ctx context.Context, in *UpdateUserLoginStateRequest, opts ...grpc.CallOption) (*UpdateUserLoginStateResponse, error) {
	out := new(UpdateUserLoginStateResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/UpdateUserLoginState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ModifyUserDeliveryInfo(ctx context.Context, in *ModifyUserDeliveryInfoRequest, opts ...grpc.CallOption) (*ModifyUserDeliveryInfoResponse, error) {
	out := new(ModifyUserDeliveryInfoResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/ModifyUserDeliveryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserDeliveryInfo(ctx context.Context, in *GetUserDeliveryInfoRequest, opts ...grpc.CallOption) (*GetUserDeliveryInfoResponse, error) {
	out := new(GetUserDeliveryInfoResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserDeliveryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) FindUserInfo(ctx context.Context, in *FindUserInfoRequest, opts ...grpc.CallOption) (*FindUserInfoResponse, error) {
	out := new(FindUserInfoResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/FindUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UserAccountCharge(ctx context.Context, in *UserAccountChargeRequest, opts ...grpc.CallOption) (*UserAccountChargeResponse, error) {
	out := new(UserAccountChargeResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/UserAccountCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckUserDeliveryInfo(ctx context.Context, in *CheckUserDeliveryInfoRequest, opts ...grpc.CallOption) (*CheckUserDeliveryInfoResponse, error) {
	out := new(CheckUserDeliveryInfoResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/CheckUserDeliveryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckUserState(ctx context.Context, in *CheckUserStateRequest, opts ...grpc.CallOption) (*CheckUserStateResponse, error) {
	out := new(CheckUserStateResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/CheckUserState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserAccountId(ctx context.Context, in *GetUserAccountIdRequest, opts ...grpc.CallOption) (*GetUserAccountIdResponse, error) {
	out := new(GetUserAccountIdResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/GetUserAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListUserInfo(ctx context.Context, in *ListUserInfoRequest, opts ...grpc.CallOption) (*ListUserInfoResponse, error) {
	out := new(ListUserInfoResponse)
	err := c.cc.Invoke(ctx, "/users.UsersService/ListUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	// Get User Info
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// Get User Info By Phone
	GetUserInfoByPhone(context.Context, *GetUserInfoByPhoneRequest) (*GetUserInfoByPhoneResponse, error)
	// CheckUserByPhone
	CheckUserByPhone(context.Context, *CheckUserByPhoneRequest) (*CheckUserByPhoneResponse, error)
	// GetUserInfoByInviteCode
	GetUserInfoByInviteCode(context.Context, *GetUserByInviteCodeRequest) (*GetUserByInviteCodeResponse, error)
	// Register
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// LoginUser
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	// CheckUserIdentity
	CheckUserIdentity(context.Context, *CheckUserIdentityRequest) (*CheckUserIdentityResponse, error)
	// PasswordReset
	PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error)
	// UpdateUserLoginState
	UpdateUserLoginState(context.Context, *UpdateUserLoginStateRequest) (*UpdateUserLoginStateResponse, error)
	// ModifyUserDeliveryInfo
	ModifyUserDeliveryInfo(context.Context, *ModifyUserDeliveryInfoRequest) (*ModifyUserDeliveryInfoResponse, error)
	// GetUserDeliveryInfo
	GetUserDeliveryInfo(context.Context, *GetUserDeliveryInfoRequest) (*GetUserDeliveryInfoResponse, error)
	// FindUserInfo
	FindUserInfo(context.Context, *FindUserInfoRequest) (*FindUserInfoResponse, error)
	// UserAccountCharge
	UserAccountCharge(context.Context, *UserAccountChargeRequest) (*UserAccountChargeResponse, error)
	// CheckUserDeliveryInfo
	CheckUserDeliveryInfo(context.Context, *CheckUserDeliveryInfoRequest) (*CheckUserDeliveryInfoResponse, error)
	// CheckUserState
	CheckUserState(context.Context, *CheckUserStateRequest) (*CheckUserStateResponse, error)
	// GetUserAccountId
	GetUserAccountId(context.Context, *GetUserAccountIdRequest) (*GetUserAccountIdResponse, error)
	// ListUserInfo
	ListUserInfo(context.Context, *ListUserInfoRequest) (*ListUserInfoResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUsersServiceServer) GetUserInfoByPhone(context.Context, *GetUserInfoByPhoneRequest) (*GetUserInfoByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByPhone not implemented")
}
func (UnimplementedUsersServiceServer) CheckUserByPhone(context.Context, *CheckUserByPhoneRequest) (*CheckUserByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserByPhone not implemented")
}
func (UnimplementedUsersServiceServer) GetUserInfoByInviteCode(context.Context, *GetUserByInviteCodeRequest) (*GetUserByInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByInviteCode not implemented")
}
func (UnimplementedUsersServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUsersServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUsersServiceServer) CheckUserIdentity(context.Context, *CheckUserIdentityRequest) (*CheckUserIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserIdentity not implemented")
}
func (UnimplementedUsersServiceServer) PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordReset not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUserLoginState(context.Context, *UpdateUserLoginStateRequest) (*UpdateUserLoginStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLoginState not implemented")
}
func (UnimplementedUsersServiceServer) ModifyUserDeliveryInfo(context.Context, *ModifyUserDeliveryInfoRequest) (*ModifyUserDeliveryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUserDeliveryInfo not implemented")
}
func (UnimplementedUsersServiceServer) GetUserDeliveryInfo(context.Context, *GetUserDeliveryInfoRequest) (*GetUserDeliveryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDeliveryInfo not implemented")
}
func (UnimplementedUsersServiceServer) FindUserInfo(context.Context, *FindUserInfoRequest) (*FindUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInfo not implemented")
}
func (UnimplementedUsersServiceServer) UserAccountCharge(context.Context, *UserAccountChargeRequest) (*UserAccountChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAccountCharge not implemented")
}
func (UnimplementedUsersServiceServer) CheckUserDeliveryInfo(context.Context, *CheckUserDeliveryInfoRequest) (*CheckUserDeliveryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserDeliveryInfo not implemented")
}
func (UnimplementedUsersServiceServer) CheckUserState(context.Context, *CheckUserStateRequest) (*CheckUserStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserState not implemented")
}
func (UnimplementedUsersServiceServer) GetUserAccountId(context.Context, *GetUserAccountIdRequest) (*GetUserAccountIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccountId not implemented")
}
func (UnimplementedUsersServiceServer) ListUserInfo(context.Context, *ListUserInfoRequest) (*ListUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserInfo not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserInfoByPhone(ctx, req.(*GetUserInfoByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/CheckUserByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckUserByPhone(ctx, req.(*CheckUserByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserInfoByInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserInfoByInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserInfoByInviteCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserInfoByInviteCode(ctx, req.(*GetUserByInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckUserIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckUserIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/CheckUserIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckUserIdentity(ctx, req.(*CheckUserIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_PasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).PasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/PasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).PasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUserLoginState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLoginStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUserLoginState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/UpdateUserLoginState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUserLoginState(ctx, req.(*UpdateUserLoginStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ModifyUserDeliveryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserDeliveryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ModifyUserDeliveryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/ModifyUserDeliveryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ModifyUserDeliveryInfo(ctx, req.(*ModifyUserDeliveryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserDeliveryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDeliveryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserDeliveryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserDeliveryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserDeliveryInfo(ctx, req.(*GetUserDeliveryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_FindUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).FindUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/FindUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).FindUserInfo(ctx, req.(*FindUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UserAccountCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UserAccountCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/UserAccountCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UserAccountCharge(ctx, req.(*UserAccountChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckUserDeliveryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserDeliveryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckUserDeliveryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/CheckUserDeliveryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckUserDeliveryInfo(ctx, req.(*CheckUserDeliveryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckUserState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckUserState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/CheckUserState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckUserState(ctx, req.(*CheckUserStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/GetUserAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserAccountId(ctx, req.(*GetUserAccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UsersService/ListUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListUserInfo(ctx, req.(*ListUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UsersService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoByPhone",
			Handler:    _UsersService_GetUserInfoByPhone_Handler,
		},
		{
			MethodName: "CheckUserByPhone",
			Handler:    _UsersService_CheckUserByPhone_Handler,
		},
		{
			MethodName: "GetUserInfoByInviteCode",
			Handler:    _UsersService_GetUserInfoByInviteCode_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UsersService_Register_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UsersService_LoginUser_Handler,
		},
		{
			MethodName: "CheckUserIdentity",
			Handler:    _UsersService_CheckUserIdentity_Handler,
		},
		{
			MethodName: "PasswordReset",
			Handler:    _UsersService_PasswordReset_Handler,
		},
		{
			MethodName: "UpdateUserLoginState",
			Handler:    _UsersService_UpdateUserLoginState_Handler,
		},
		{
			MethodName: "ModifyUserDeliveryInfo",
			Handler:    _UsersService_ModifyUserDeliveryInfo_Handler,
		},
		{
			MethodName: "GetUserDeliveryInfo",
			Handler:    _UsersService_GetUserDeliveryInfo_Handler,
		},
		{
			MethodName: "FindUserInfo",
			Handler:    _UsersService_FindUserInfo_Handler,
		},
		{
			MethodName: "UserAccountCharge",
			Handler:    _UsersService_UserAccountCharge_Handler,
		},
		{
			MethodName: "CheckUserDeliveryInfo",
			Handler:    _UsersService_CheckUserDeliveryInfo_Handler,
		},
		{
			MethodName: "CheckUserState",
			Handler:    _UsersService_CheckUserState_Handler,
		},
		{
			MethodName: "GetUserAccountId",
			Handler:    _UsersService_GetUserAccountId_Handler,
		},
		{
			MethodName: "ListUserInfo",
			Handler:    _UsersService_ListUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall_users_proto/users/users.proto",
}

// MerchantsServiceClient is the client API for MerchantsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantsServiceClient interface {
	// MerchantsMaterial
	MerchantsMaterial(ctx context.Context, in *MerchantsMaterialRequest, opts ...grpc.CallOption) (*MerchantsMaterialResponse, error)
	// MerchantsMaterialAudit
	MerchantsMaterialAudit(ctx context.Context, in *MerchantsMaterialAuditRequest, opts ...grpc.CallOption) (*MerchantsMaterialAuditResponse, error)
	// GetMerchantsMaterial
	GetMerchantsMaterial(ctx context.Context, in *GetMerchantsMaterialRequest, opts ...grpc.CallOption) (*GetMerchantsMaterialResponse, error)
	// MerchantsAssociateShop
	MerchantsAssociateShop(ctx context.Context, in *MerchantsAssociateShopRequest, opts ...grpc.CallOption) (*MerchantsAssociateShopResponse, error)
}

type merchantsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantsServiceClient(cc grpc.ClientConnInterface) MerchantsServiceClient {
	return &merchantsServiceClient{cc}
}

func (c *merchantsServiceClient) MerchantsMaterial(ctx context.Context, in *MerchantsMaterialRequest, opts ...grpc.CallOption) (*MerchantsMaterialResponse, error) {
	out := new(MerchantsMaterialResponse)
	err := c.cc.Invoke(ctx, "/users.MerchantsService/MerchantsMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantsServiceClient) MerchantsMaterialAudit(ctx context.Context, in *MerchantsMaterialAuditRequest, opts ...grpc.CallOption) (*MerchantsMaterialAuditResponse, error) {
	out := new(MerchantsMaterialAuditResponse)
	err := c.cc.Invoke(ctx, "/users.MerchantsService/MerchantsMaterialAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantsServiceClient) GetMerchantsMaterial(ctx context.Context, in *GetMerchantsMaterialRequest, opts ...grpc.CallOption) (*GetMerchantsMaterialResponse, error) {
	out := new(GetMerchantsMaterialResponse)
	err := c.cc.Invoke(ctx, "/users.MerchantsService/GetMerchantsMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantsServiceClient) MerchantsAssociateShop(ctx context.Context, in *MerchantsAssociateShopRequest, opts ...grpc.CallOption) (*MerchantsAssociateShopResponse, error) {
	out := new(MerchantsAssociateShopResponse)
	err := c.cc.Invoke(ctx, "/users.MerchantsService/MerchantsAssociateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantsServiceServer is the server API for MerchantsService service.
// All implementations must embed UnimplementedMerchantsServiceServer
// for forward compatibility
type MerchantsServiceServer interface {
	// MerchantsMaterial
	MerchantsMaterial(context.Context, *MerchantsMaterialRequest) (*MerchantsMaterialResponse, error)
	// MerchantsMaterialAudit
	MerchantsMaterialAudit(context.Context, *MerchantsMaterialAuditRequest) (*MerchantsMaterialAuditResponse, error)
	// GetMerchantsMaterial
	GetMerchantsMaterial(context.Context, *GetMerchantsMaterialRequest) (*GetMerchantsMaterialResponse, error)
	// MerchantsAssociateShop
	MerchantsAssociateShop(context.Context, *MerchantsAssociateShopRequest) (*MerchantsAssociateShopResponse, error)
	mustEmbedUnimplementedMerchantsServiceServer()
}

// UnimplementedMerchantsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantsServiceServer struct {
}

func (UnimplementedMerchantsServiceServer) MerchantsMaterial(context.Context, *MerchantsMaterialRequest) (*MerchantsMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantsMaterial not implemented")
}
func (UnimplementedMerchantsServiceServer) MerchantsMaterialAudit(context.Context, *MerchantsMaterialAuditRequest) (*MerchantsMaterialAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantsMaterialAudit not implemented")
}
func (UnimplementedMerchantsServiceServer) GetMerchantsMaterial(context.Context, *GetMerchantsMaterialRequest) (*GetMerchantsMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantsMaterial not implemented")
}
func (UnimplementedMerchantsServiceServer) MerchantsAssociateShop(context.Context, *MerchantsAssociateShopRequest) (*MerchantsAssociateShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantsAssociateShop not implemented")
}
func (UnimplementedMerchantsServiceServer) mustEmbedUnimplementedMerchantsServiceServer() {}

// UnsafeMerchantsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantsServiceServer will
// result in compilation errors.
type UnsafeMerchantsServiceServer interface {
	mustEmbedUnimplementedMerchantsServiceServer()
}

func RegisterMerchantsServiceServer(s grpc.ServiceRegistrar, srv MerchantsServiceServer) {
	s.RegisterService(&MerchantsService_ServiceDesc, srv)
}

func _MerchantsService_MerchantsMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantsMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantsServiceServer).MerchantsMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.MerchantsService/MerchantsMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantsServiceServer).MerchantsMaterial(ctx, req.(*MerchantsMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantsService_MerchantsMaterialAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantsMaterialAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantsServiceServer).MerchantsMaterialAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.MerchantsService/MerchantsMaterialAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantsServiceServer).MerchantsMaterialAudit(ctx, req.(*MerchantsMaterialAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantsService_GetMerchantsMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantsMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantsServiceServer).GetMerchantsMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.MerchantsService/GetMerchantsMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantsServiceServer).GetMerchantsMaterial(ctx, req.(*GetMerchantsMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantsService_MerchantsAssociateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantsAssociateShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantsServiceServer).MerchantsAssociateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.MerchantsService/MerchantsAssociateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantsServiceServer).MerchantsAssociateShop(ctx, req.(*MerchantsAssociateShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantsService_ServiceDesc is the grpc.ServiceDesc for MerchantsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.MerchantsService",
	HandlerType: (*MerchantsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MerchantsMaterial",
			Handler:    _MerchantsService_MerchantsMaterial_Handler,
		},
		{
			MethodName: "MerchantsMaterialAudit",
			Handler:    _MerchantsService_MerchantsMaterialAudit_Handler,
		},
		{
			MethodName: "GetMerchantsMaterial",
			Handler:    _MerchantsService_GetMerchantsMaterial_Handler,
		},
		{
			MethodName: "MerchantsAssociateShop",
			Handler:    _MerchantsService_MerchantsAssociateShop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall_users_proto/users/users.proto",
}
